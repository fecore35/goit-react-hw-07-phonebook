{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","createContact","createAction","deleteContact","changeFilter","itemsReducer","createReducer","state","action","payload","filter","item","id","filterReducer","contactsReducer","combineReducers","items","rootReducer","contacts","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","persistor","persistStore","getContacts","getFilter","getVisibleContacts","search","toUpperCase","contact","name","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","handlerChange","event","target","value","className","s","form","onSubmit","e","preventDefault","newContactName","find","alert","newContact","uuidv4","label","type","input","pattern","title","required","onChange","button","Filter","container","ContactList","visibleContacts","list","map","tel","replace","href","onClick","currentTarget","dataset","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.90ef5670.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"button\":\"ContactList_button__1RuFy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","import { createAction } from \"@reduxjs/toolkit\";\n\nconst createContact = createAction(\"contacts/Create\");\nconst deleteContact = createAction(\"contacts/Delete\");\nconst changeFilter = createAction(\"contacts/Filter\");\n\nexport { createContact, deleteContact, changeFilter };\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport {\n  createContact,\n  deleteContact,\n  changeFilter,\n} from \"../contacts/contacts-action\";\n\nconst itemsReducer = createReducer([], {\n  [createContact]: (state, action) => [action.payload, ...state],\n  [deleteContact]: (state, action) =>\n    state.filter((item) => item.id !== action.payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [changeFilter]: (state, action) => action.payload,\n});\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { contactsReducer } from \"./contacts/contacts-reducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst persistConfig = {\n  key: \"contacts\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: true ?? process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","export const getContacts = (state) => state.contacts.items;\n\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getVisibleContacts = (state) => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const search = filter.toUpperCase();\n  return contacts.filter((contact) =>\n    contact.name.toUpperCase().includes(search)\n  );\n};\n","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport s from \"./ContactForm.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createContact } from \"redux/contacts/contacts-action\";\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handlerChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const onSaveContact = (e) => {\n    e.preventDefault();\n\n    const newContactName = e.target.name.value.toUpperCase();\n    const knownContactToName = contacts.find(\n      ({ name }) => name.toUpperCase() === newContactName\n    );\n\n    if (knownContactToName) {\n      return alert(`${newContactName} is already in contacts.`);\n    }\n\n    const newContact = { id: uuidv4(), name, number };\n    setName(\"\");\n    setNumber(\"\");\n\n    // ? GlobalState - add new Contact\n    dispatch(createContact(newContact));\n  };\n\n  return (\n    <form className={s.form} onSubmit={onSaveContact}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          className={s.input}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handlerChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import s from \"./Filter.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeFilter } from \"../../redux/contacts/contacts-action\";\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <section className={s.container}>\n      <label>\n        Find contact by name\n        <input\n          type=\"text\"\n          className={s.input}\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={filter}\n          onChange={(e) => dispatch(changeFilter(e.target.value))}\n        />\n      </label>\n    </section>\n  );\n}\n\nexport default Filter;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { IoCloseCircleSharp } from \"react-icons/io5\";\nimport s from \"./ContactList.module.css\";\nimport { deleteContact } from \"../../redux/contacts/contacts-action\";\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selectors\";\n\nfunction ContactList() {\n  const visibleContacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {visibleContacts &&\n        visibleContacts.map(({ id, name, number }) => {\n          const tel = `tel:` + number.replace(/^(\\+)|\\D/g, \"$1\");\n          return (\n            <li key={id} className={s.item}>\n              <p>\n                {name}: <a href={tel}>{number}</a>\n              </p>\n              <button\n                className={s.button}\n                type=\"button\"\n                data-id={id}\n                onClick={(e) => {\n                  dispatch(deleteContact(e.currentTarget.dataset.id));\n                }}\n              >\n                <IoCloseCircleSharp />\n              </button>\n            </li>\n          );\n        })}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"redux/store\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};"],"sourceRoot":""}